"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 1.10.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import logging
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'pn!i4*p&xg$5zzrg7w8$e6q)gt)2#p6^g+^e4#xydbbg#*t$$p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',
    'corsheaders',
    'services',
    'rest_framework',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'settings.urls'

CORS_ORIGIN_ALLOW_ALL = True

WSGI_APPLICATION = 'settings.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    )
}

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DJANGO_LOG_LEVEL = "DEBUG"

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(created)s::%(levelname)s::%(filename)s::%('
                      'funcName)s::%(module)s::%(lineno)d::%(message)s]'
        },
        'simple': {
            'format': '[%(asctime)s::%(levelname)s::%(filename)s::%('
                      'funcName)s::%(lineno)d::%(message)s]'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'vriot': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/var/log/vriot_api.log',
            # 'maxBytes': 1024 * 1024 * 5,  # 5 MB

            # 'backupCount': 10,
            'formatter': 'verbose'
        },
        'mqtt_service': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/var/log/mqtt_service.log',
            # 'maxBytes': 1024 * 1024 * 5,  # 5 MB
            # 'backupCount': 10,
            'formatter': 'verbose'
        },
        'mongo_default_service': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/var/log/mongo_default_service.log',
            # 'maxBytes': 1024 * 1024 * 5,  # 5 MB
            # 'backupCount': 10,
            'formatter': 'verbose'
        },
        'assa_abloy': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/var/log/assa_abloy.log',
            # 'maxBytes': 1024 * 1024 * 5,  # 5 MB
            # 'backupCount': 10,
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'vriot': {
            'handlers': ['vriot', 'console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', DJANGO_LOG_LEVEL),
            'propagate': True,
        },
        'mqtt_service': {
            'handlers': ['mqtt_service', 'console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', DJANGO_LOG_LEVEL),
            'propagate': True,
        },
        'mongo_default_service': {
            'handlers': ['mongo_default_service', 'console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', DJANGO_LOG_LEVEL),
            'propagate': True,
        },
        'assa_abloy': {
            'handlers': ['assa_abloy', 'console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', DJANGO_LOG_LEVEL),
            'propagate': True,
        }
    },
}

STATIC_URL = '/static/'

ATTRIBUTE_VALUE_KEYS = {
    'BRIGHTNESS': ['level'],
    'COLOR': ['red', 'blue', 'green'],
    'STATE': ['on'],
    'LOCK_STATE': ['lock']

}

SENSOR_TYPE_MAP = {
    "LIGHT": 0,
    "DOOR_LOCK": 1,
    "SWITCH": 2
}

VRIOT_LOGGER = logging.getLogger("vriot")
MQTT_LOGGER = logging.getLogger("mqtt_service")
MONGO_LOGGER = logging.getLogger("mongo_default_service")
ASSA_ABLOY_LOGGER = logging.getLogger("assa_abloy")

DB_HOST = os.environ.get("DB_HOST", "127.0.0.1")
MQTT_HOST = os.environ.get("MQTT_HOST", "127.0.0.1")
MQTT_SSL_ENABLED = False
AMQP_HOST = os.environ.get("AMQP_HOST", "127.0.0.1:5672")
VISIONLINE_SERVER = "127.0.0.1:443"
# More lines shall be added below programmatically and
# those values shall override above values.

# lines below here are added by run script.! 
