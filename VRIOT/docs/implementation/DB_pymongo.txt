This document is detailed explanation of how to use DB calls with py mongo
and initialization of the classes.

1. Implementing the Document Class
To connect or create a document you will have to create a class which import
the generic db model 'DBModel' from 'common.db_models.common_models'. For Ex.

    class MyDocumentClass(DBModel):
        meta = {
            "collection": "my_collection"
            "indexes": [
                "#my_index"
            ]
        }

The meta variable inside the class, give the information to the pymongo
driver to do certain operation before doing some operations. Currently meta
variable takes only two variables:
    1.1. collection: Then name of the collection in mongo DB.
    1.2. indexes: the index to be created on the collection. There are
    different type of index creations supported which are listed below:
        1.2.1. Default - "my_index" - Ascending index
        1.2.2. Descending Index - "-my_index"
        1.2.3. Text Index - "$my_index"
        1.2.4. Hashed Index - "#my_index"
        1.2.5. Geosphere Index - "(my_index"
        1.2.6. Geohaystack Index - ")my_index"
        1.2.7. Geo2D Index - "*my_index"

2. Querying Functions Supported
On inheriting the 'DBModel' to the document class these are the functions
inherited by default to the document class.

    2.1. get(query=None)
        This function is to get a single document for the matching query
        passed to the function for querying on the document. Additionally, it
        will return documents if the "is_delete" variable is "False". For ex.

            MyDocumentClass.get(query={"name": "John", "last_name": "Doe"})

        return: Document as dictionary

    2.2. get_by_id(_id)
        This function is similar to get but returns a document by
        passing the mongo DB id. For ex.

            MyDocumentClass.get("58ae505c829572ed14b711b5")

        return: Document as dictionary

    2.3. find(query=None)
        This function is similar to get but will return an array of documents
        which match the query. For ex.

            MyDocumentClass.find(query={"last_name": "Doe"})

        return: Pymongo Cursor

    2.4. all()
        This function returns all the documents in the collection. For ex.

            MyDocumentClass.all()

        return: Pymongo Cursor

    2.5. create(document)
        This function creates a document in the DB with "is_deleted" as False
        and "created_on" timestamp by default. For ex.

            data = {"name": "Brown", "last_name": "Fox"}
            MyDocumentClass.create(data)

        return: Data dictionary with new "_id" field in it.

    2.6. create_bulk(documents)
        This function is similar to create but creates multiple documents in
        a single command. For ex.

            data = [
                {"name": "Brown", "last_name": "Fox"},
                {"name": "Alice", "last_name": "Maiden"}
            ]
            MyDocumentClass.create_bulk(data)

        return: List of new inserted ids, but Updates Data list of dictionary
        with new "_id" field in it.

    2.7. update(query=None, update_fields=None, **kwargs)
        This function is to update a single document in the DB. the query
        parameter is to fetch the document which has to be updated. The
        update fields are the fields which needs to be updated. For ex.

            MyDocumentClass.update(query={"name": "Brown"},
            update_fields={"name": "Lazy"})

        return: the number of documents updated.

    2.8. update_bulk(query=None, update_fields=None, **kwargs)
        This function is similar to update but updates multiple documents
        which match the query. For ex.

            MyDocumentClass.update_bulk(query={"name": "Brown"},
            update_fields={"name": "Lazy"})

        return: the number of documents updated.

    2.9. delete(query=None)
        This function deletes the document which matches the query. Here the
        delete is a soft delete where the "is_delete" flag is set to True,
        soother functions can't fetch them. For ex.

            MyDocumentClass.delete(query={"name": "Lazy"})

        return: the number of documents deleted.

    2.10. delete_by_id(_id)
        This function is similar to delete but deletes the document by the
        mongo DB id, which is passed. For Ex.

            MyDocumentClass.delete(query={"name": "Lazy"})

        return: the number od documents deleted.

    2.11. delete_bulk(query)
        This function is similar to delete but deletes a set documents which
        match the query. For Ex.

            MyDocumentClass.delete_bulk(query={"name": "Lazy"})

        return: the number od documents deleted.

    2.12. count(cursor)
        This function is to return the count of records retrieved from the DB
        . For ex.

            db_objects = MyDocumentClass.all()
            MyDocumentClass.count(db_objects)

        return: Number of records in the cursor.

    2.13. save(document)
        This function is a wrapper over create or update. The function checks
        for the "_id" field in the document. If the "_id" field is found then
        it updated the mongo document which matches the mongo id else it
        creates a new record. For ex.

            Create case:

            data = {"name": "Brown", "last_name": "Fox"}
            MyDocumentClass.save(data)

            Update case:

            data = {"_id":"58ae505c829572ed14b711b5", "name": "Brown",
            "last_name": "Fox"}
            MyDocumentClass.save(data)

        return: Returns the document with "_id" field in it.

3. Linking Serializers to Document Class
To validate data inside the system, serializers are the best approach to do
the operations. to link serializers with the DB, the serializers need to
inherit the generic "PyMongoSerializer" from "common.db_models
.common_serializers"

    class MySerializer(PyMongoSerializer):
        name = serializers.CharField(required=False)
        last_name = serializers.CharField(required=False)

The generic serializer which is inherited, contains the function "save_to_db",
which validates the data and saves to DB. For ex.

    data = {"name": "John", "last_name": "Doe"}
    MySerializer(data=data).save_to_db()

    return: returns the document from DB

To save a existing data, the class of the document needs to be passed as the
first parameter.

    data = {"name": "John", "last_name": "Doe"}
    MySerializer(MyDocumentClass, data=data).save_to_db()

    return: returns the document from DB